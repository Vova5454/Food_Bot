import telebot as tb
from telebot import types
import json

ITEMS_PER_PAGE = 4
token = "7949756952:AAGheS7kkN67sGaXqWVN0omyEzW0uBev6Uo"
bot = tb.TeleBot(token)

with open("client_info.json", "r", encoding="utf-8") as f:
    user_info = json.load(f)

menu_items = [
        {"name": "–ì—Ä–∏–±–Ω–æ–π —Å—É–ø", "price": "450 —Ä—É–±.", "photo": "mushroom_soup.png"},
        {"name": "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å", "price": "550 —Ä—É–±.", "photo": "caesar.png"},
        {"name": "–£—Ç–∫–∞ —Å –∞–ø–µ–ª—å—Å–∏–Ω–∞–º–∏", "price": "700 —Ä—É–±.", "photo": "duck_orange.png"},
        {"name": "–ë–µ—Ñ—Å—Ç—Ä–æ–≥–∞–Ω–æ–≤", "price": "650 —Ä—É–±.", "photo": "stroganoff.png"},
        {"name": "–†–∏–∑–æ—Ç—Ç–æ", "price": "500 —Ä—É–±.", "photo": "risotto.png"},
        {"name": "–¢–∏—Ä–∞–º–∏—Å—É", "price": "400 —Ä—É–±.", "photo": "tiramisu.png"},
        {"name": "–ë–ª–∏–Ω—ã", "price": "300 —Ä—É–±.", "photo": "pancakes.png"},
        {"name": "–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞", "price": "550 —Ä—É–±.", "photo": "carbonara.png"},
        {"name": "–ì–∞—Å–ø–∞—á–æ", "price": "350 —Ä—É–±.", "photo": "gazpacho.png"},
        {"name": "–§–∞–ª–∞—Ñ–µ–ª—å", "price": "400 —Ä—É–±.", "photo": "falafel.png"},
        {"name": "–í–æ–¥–∞", "price": "100 —Ä—É–±", "photo": "water.png" },
        {"name": "–Ø–±–ª–æ—á–Ω—ã–π —Å–æ–∫", "price": "150 —Ä—É–±", "photo": "apple_juice.png"},
        {"name": "–ö–æ–∫–∞ –∫–æ–ª–∞", "price": "200 —Ä—É–±", "photo": "cola.png"},
        {"name": "–ú–æ–ª–æ–∫–æ", "price": "150 —Ä—É–±", "photo": "milk.png"},
        {"name": "–ú–∞—Ö–∏—Ç–æ", "price": "500 —Ä—É–±", "photo": "majito.png"},
        {"name": "–°–ø—Ä–∞–π—Ç", "price": "200 —Ä—É–±", "photo": "sprite.png"},
        {"name": "–ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥", "price": "300 —Ä—É–±", "photo": "hot_chocolate.png"},
        {"name": "–ß–∞–π", "price": "150 —Ä—É–±", "photo": "tea.png"},
        {"name": "–ú–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–ª—å", "price": "250 —Ä—É–±", "photo": "milkshake.png"},
        {"name": "–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–º—É–∑–∏", "price": "500 —Ä—É–±", "photo": "smoothie.png"}]

@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç. –Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –µ–¥—ãüòÄ", reply_markup=summon_button())
    with open("client_info.json", "r", encoding="utf-8") as f:
        user_info = json.load(f)
    for client in user_info.get("clients", []):
        if client["id"] == str(message.chat.id):
            bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=summon_button())
            break
    else:
        user_info["clients"].append({"id": str(message.chat.id), "cart": []})
        bot.send_message(message.chat.id, "–í—ã —Ç–µ–ø–µ—Ä—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=summon_button())
    with open("client_info.json", "w", encoding="utf-8") as f:
        json.dump(user_info, f, ensure_ascii=False, indent=4)

@bot.message_handler(commands=["add_info"])
def add_info(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ", reply_markup=summon_button())
    bot.register_next_step_handler_by_chat_id(message.chat.id, save_name)

@bot.message_handler(func=lambda message: True)
def echo(message):
    if message.text == "–ú–µ–Ω—éüçú":
        bot.send_message(message.chat.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—éü•™", reply_markup=menu_keyboard())
    if message.text == "–ö–æ—Ä–∑–∏–Ω–∞üóëÔ∏è":
        cart = get_cart(message.chat.id)
        keyboard = types.InlineKeyboardMarkup()
        if cart == []:
            bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", reply_markup=summon_button())
        else:
            for dish in cart:
                keyboard.add(types.InlineKeyboardButton(text=f"{dish[0]} x{dish[1]}", callback_data=f"remove_{dish[0]}"))
            bot.send_message(message.chat.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ãüóëÔ∏è", reply_markup=keyboard)
    if message.text == "–ó–∞–∫–∞–∑–∞—Ç—åüçï":
        with open("client_info.json", "r", encoding="utf-8") as f:
            user_info = json.load(f)
        client_data = user_info.get("clients", [])
        for client in client_data:
            if client["id"] == str(message.chat.id):
                cart = client["cart"]
        if cart == []:
            bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", reply_markup=summon_button())
        else:
            order = "–í–∞—à –∑–∞–∫–∞–∑:\n"
            for item in cart:
                order = f"{order}{item[0]} x{item[1]}\n"
            bot.send_message(message.chat.id, order, reply_markup=summon_button())
            bot.send_message(message.chat.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:", reply_markup=confirm_buttons())
    if message.text == "–û—Ç–º–µ–Ω–∞‚ùå":
        bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑.", reply_markup=summon_button())
    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ":
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º:\n–ì–µ–æ–º–µ—Ç–∫–∞\n–¢–µ–∫—Å—Ç", reply_markup=summon_button())
        bot.register_next_step_handler_by_chat_id(message.chat.id, create_order)

@bot.callback_query_handler(func=lambda call: True)
def query(call):
    global user_info
    if call.data.startswith("page_"):
        _, page = call.data.split("_")
        markup = menu_keyboard(int(page))
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—éü•™",
                              reply_markup=markup)
    if call.data.startswith("food_"):
        info = call.data.split("_")
        add_to_cart(call.message.chat.id, info[1])
        bot.send_message(call.message.chat.id, f"{info[1]} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑!", reply_markup=summon_button())
    if call.data.startswith("remove_"):
        food = call.data.split("_")[1]
        delete_from_cart(call.message, food)
        bot.send_message(call.message.chat.id, f"{food} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞—Ä–∑–∏–Ω—ã!", reply_markup=summon_button())
        cart = get_cart(call.message.chat.id)
        if cart == []:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        else:
            keyboard = types.InlineKeyboardMarkup()
            for dish in cart:
                keyboard.add(types.InlineKeyboardButton(text=f"{dish[0]} x{dish[1]}", callback_data=f"remove_{dish[0]}"))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ãüóëÔ∏è", reply_markup=keyboard)

def summon_button():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ú–µ–Ω—éüçú")
    btn2 = types.KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞üóëÔ∏è")
    btn3 = types.KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—åüçï")
    keyboard.add(btn1, btn2, btn3)
    return keyboard

def confirm_buttons():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    confirm = types.KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ")
    decline = types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå")
    keyboard.add(confirm, decline)
    return keyboard

def menu_keyboard(page=0):
    keyboard = types.InlineKeyboardMarkup()
    start_index = page * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    for item in menu_items[start_index:end_index]:
        button = types.InlineKeyboardButton(text=f"{item["name"]}", callback_data=f"food_{item['name']}")
        keyboard.add(button)
    if end_index < len(menu_items):
        keyboard.add(types.InlineKeyboardButton(text="-->", callback_data=f"page_{page+1}"))
    if page > 0:
        keyboard.add(types.InlineKeyboardButton(text="<--", callback_data=f"page_{page-1}"))
    return keyboard

def save_name(message):
    name = message.text
    bot.send_message(message.chat.id, "–ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ", reply_markup=summon_button())
    bot.register_next_step_handler_by_chat_id(message.chat.id, save_phone, name)

def save_phone(message, name):
    global user_info
    try:
        phone = int(message.text)
        client_data = user_info.get("clients", [])
        for client in client_data:
            if client["id"] == str(message.chat.id):
                client["name"] = name
                client["phone"] = str(phone)
                save_data(user_info)
                bot.send_message(message.chat.id, f"–ò–º—è: {name}, –¢–µ–ª–µ—Ñ–æ–Ω: {phone}", reply_markup=summon_button())
    except ValueError:
        bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ: /add_info", reply_markup=summon_button())

def save_data(user_info):
    with open("client_info.json", "w", encoding="utf-8") as f:
        json.dump(user_info, f, ensure_ascii=False, indent=4)

def get_cart(client_id):
    with open("client_info.json", "r", encoding="utf-8") as f:
        data = json.load(f)
    clients = data.get("clients", [])
    for client in clients:
        if client.get("id") == str(client_id):
            return client.get("cart", []) 
    return []

def add_to_cart(client_id, item):
    with open("client_info.json", "r", encoding="utf-8") as file:
        user_info = json.load(file)
    client_data = user_info.get("clients", [])
    for client in client_data:
        if client.get("id") == str(client_id):
            found = False
            for dish in client["cart"]:
                if dish[0] == item:
                    dish[1] += 1
                    found = True
            if not found:
                client["cart"].append([item, 1])
    user_info["clients"] = client_data
    with open("client_info.json", "w", encoding="utf-8") as file:
        json.dump(user_info, file, ensure_ascii=False, indent=4)

def delete_from_cart(message, item):
    with open("client_info.json", "r", encoding="utf-8") as f:
        user_info = json.load(f)
    client_data = user_info.get("clients", [])
    for client in client_data:
        if client.get("id") == str(message.chat.id):
            for dish in client["cart"]:
                if dish[0] == item:
                    if dish[1] == 1:
                        client["cart"].remove(dish)
                    else:
                        dish[1] -= 1
    user_info["clients"] = client_data
    with open("client_info.json", "w", encoding="utf-8") as file:
        json.dump(user_info, file, ensure_ascii=False, indent=4)

def create_order(message):
    if message.content_type == "text":
        addres = message.text
    elif message.content_type == "location":
        coord1 = message.location.latitude
        coord2 = message.location.longitude
        addres = f"{coord1}, {coord2}"
    bot.send_message(message.chat.id, f"–í–∞—à –∞–¥—Ä–µ—Å: {addres}", reply_markup=summon_button())
    bot.send_message(message.chat.id, f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {calculate_cart_total(message.chat.id)}", reply_markup=summon_button())
    bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É.", reply_markup=summon_button())
    bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—ÉüöÄ", reply_markup=summon_button())

def calculate_cart_total(client_id):
    total = 0
    cart = get_cart(client_id)
    for item in cart:
        for dish in menu_items:
            if item[0] == dish["name"]:
                total += int(dish["price"].split(" ")[0]) * item[1]
    return total

           
bot.polling(none_stop=True)